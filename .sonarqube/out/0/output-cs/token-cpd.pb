ı
TD:\Repo\Marsen\Marsen.NetCore.Dojo\src\Marsen.NetCore.Dojo\Kata_FizzBuzz\BuzzRule.cs
	namespace 	
Marsen
 
. 
NetCore 
. 
Dojo 
. 
Kata_FizzBuzz +
{ 
public 

class 
BuzzRule 
: 
IRule 
{ 
public 
string 
Apply 
( 
int 
input  %
,% &
string' -
result. 4
)4 5
{ 	
if 
( 
input 
% 
$num 
== 
$num 
) 
{ 
result		 
+=		 
$str		  
;		  !
}

 
return 
result 
; 
} 	
} 
} ò
TD:\Repo\Marsen\Marsen.NetCore.Dojo\src\Marsen.NetCore.Dojo\Kata_FizzBuzz\FizzBuzz.cs
	namespace 	
Marsen
 
. 
NetCore 
. 
Dojo 
. 
Kata_FizzBuzz +
{ 
public 

class 
FizzBuzz 
{ 
private		 
readonly		 
List		 
<		 
IRule		 #
>		# $
_rules		% +
=		, -
new		. 1
List		2 6
<		6 7
IRule		7 <
>		< =
{		> ?
new		? B
FizzRule		C K
(		K L
)		L M
,		M N
new		O R
BuzzRule		S [
(		[ \
)		\ ]
,		] ^
new		_ b

NormalRule		c m
(		m n
)		n o
}		o p
;		p q
public 
string 
Get 
( 
int 
input #
)# $
{ 	
return 
_rules 
. 
	Aggregate #
(# $
string$ *
.* +
Empty+ 0
,0 1
(2 3
s3 4
,4 5
r6 7
)7 8
=>9 ;
r< =
.= >
Apply> C
(C D
inputD I
,I J
sK L
)L M
)M N
;N O
} 	
} 
} ı
TD:\Repo\Marsen\Marsen.NetCore.Dojo\src\Marsen.NetCore.Dojo\Kata_FizzBuzz\FizzRule.cs
	namespace 	
Marsen
 
. 
NetCore 
. 
Dojo 
. 
Kata_FizzBuzz +
{ 
public 

class 
FizzRule 
: 
IRule !
{ 
public 
string 
Apply 
( 
int 
input  %
,% &
string' -
result. 4
)4 5
{ 	
if 
( 
input 
% 
$num 
== 
$num 
) 
{ 
result		 
+=		 
$str		  
;		  !
}

 
return 
result 
; 
} 	
} 
} ê
QD:\Repo\Marsen\Marsen.NetCore.Dojo\src\Marsen.NetCore.Dojo\Kata_FizzBuzz\IRule.cs
	namespace 	
Marsen
 
. 
NetCore 
. 
Dojo 
. 
Kata_FizzBuzz +
{ 
public 

	interface 
IRule 
{ 
string 
Apply 
( 
int 
input 
, 
string  &
result' -
)- .
;. /
} 
} ÷
VD:\Repo\Marsen\Marsen.NetCore.Dojo\src\Marsen.NetCore.Dojo\Kata_FizzBuzz\NormalRule.cs
	namespace 	
Marsen
 
. 
NetCore 
. 
Dojo 
. 
Kata_FizzBuzz +
{ 
public 

class 

NormalRule 
: 
IRule #
{ 
public 
string 
Apply 
( 
int 
input  %
,% &
string' -
result. 4
)4 5
{ 	
if 
( 
string 
. 
IsNullOrEmpty $
($ %
result% +
)+ ,
), -
{ 
result		 
=		 
input		 
.		 
ToString		 '
(		' (
)		( )
;		) *
}

 
return 
result 
; 
} 	
} 
} ¢
VD:\Repo\Marsen\Marsen.NetCore.Dojo\src\Marsen.NetCore.Dojo\Kata_FooBarQix\FooBarQix.cs
	namespace 	
Marsen
 
. 
NetCore 
. 
Dojo 
. 
Kata_FooBarQix ,
{ 
public 

class 
	FooBarQix 
{ 
public 
string 
Get 
( 
int 
input #
)# $
{ 	
var 
result 
= 
string 
.  
Empty  %
;% &
if 
( 
IsDivisibleBy 
( 
$num 
,  
input! &
)& '
)' (
{		 
result

 
+=

 
$str

 
;

  
} 
if 
( 
IsDivisibleBy 
( 
$num 
,  
input! &
)& '
)' (
{ 
result 
+= 
$str 
;  
} 
if 
( 
IsDivisibleBy 
( 
$num 
,  
input! &
)& '
)' (
{ 
result 
+= 
$str 
;  
} 
if 
( 

IsContains 
( 
$num 
, 
input #
)# $
)$ %
{ 
result 
+= 
$str 
;  
} 
if 
( 

IsContains 
( 
$num 
, 
input #
)# $
)$ %
{ 
result 
+= 
$str 
;  
} 
if!! 
(!! 

IsContains!! 
(!! 
$num!! 
,!! 
input!! #
)!!# $
)!!$ %
{"" 
result## 
+=## 
$str## 
;##  
}$$ 
return&& 
string&& 
.&& 
IsNullOrEmpty&& '
(&&' (
result&&( .
)&&. /
?&&0 1
input&&2 7
.&&7 8
ToString&&8 @
(&&@ A
)&&A B
:&&C D
result&&E K
;&&K L
}'' 	
private)) 
bool)) 

IsContains)) 
())  
int))  #
i))$ %
,))% &
int))' *
input))+ 0
)))0 1
{** 	
return++ 
input++ 
.++ 
ToString++ !
(++! "
)++" #
.++# $
Contains++$ ,
(++, -
i++- .
.++. /
ToString++/ 7
(++7 8
)++8 9
)++9 :
;++: ;
},, 	
private.. 
bool.. 
IsDivisibleBy.. "
(.." #
int..# &
i..' (
,..( )
int..* -
input... 3
)..3 4
{// 	
return00 
input00 
%00 
i00 
==00 
$num00  !
;00! "
}11 	
}22 
}33 ∫
aD:\Repo\Marsen\Marsen.NetCore.Dojo\src\Marsen.NetCore.Dojo\Kata_ReverseString\HalfLoopReversal.cs
	namespace 	
Marsen
 
. 
NetCore 
. 
Dojo 
. 
Tests #
.# $
Kata_ReverseString$ 6
{ 
public 

class 
HalfLoopReversal !
:" #
IStringReversal$ 3
{ 
public 
string 
Do 
( 
string 
input  %
)% &
{ 	
if 
( 
input 
is 
null 
) 
{ 
return		 
null		 
;		 
}

 
var 
cArray 
= 
input 
. 
ToCharArray *
(* +
)+ ,
;, -
for 
( 
var 
i 
= 
$num 
; 
i 
< 
cArray  &
.& '
Length' -
/. /
$num0 1
;1 2
i3 4
++4 6
)6 7
{ 
var 
temp 
= 
cArray !
[! "
i" #
]# $
;$ %
var 
l 
= 
cArray 
. 
Length %
-& '
$num( )
-* +
i, -
;- .
cArray 
[ 
i 
] 
= 
cArray "
[" #
l# $
]$ %
;% &
cArray 
[ 
l 
] 
= 
temp  
;  !
} 
return 
new 
string 
( 
cArray $
)$ %
;% &
} 	
} 
} ô
`D:\Repo\Marsen\Marsen.NetCore.Dojo\src\Marsen.NetCore.Dojo\Kata_ReverseString\IStringReversal.cs
	namespace 	
Marsen
 
. 
NetCore 
. 
Dojo 
. 
Tests #
.# $
Kata_ReverseString$ 6
{ 
public 

	interface 
IStringReversal $
{ 
string 
Do 
( 
string 
input 
) 
;  
} 
} Ü
]D:\Repo\Marsen\Marsen.NetCore.Dojo\src\Marsen.NetCore.Dojo\Kata_ReverseString\LoopReversal.cs
	namespace 	
Marsen
 
. 
NetCore 
. 
Dojo 
. 
Tests #
.# $
Kata_ReverseString$ 6
{ 
public 

class 
LoopReversal 
: 
IStringReversal  /
{ 
public 
string 
Do 
( 
string 
input  %
)% &
{ 	
return		 
input		 
?		 
.		 
ToCharArray		 %
(		% &
)		& '
.		' (
	Aggregate		( 1
(		1 2
string		2 8
.		8 9
Empty		9 >
,		> ?
(		@ A
current		A H
,		H I
c		J K
)		K L
=>		M O
c		P Q
+		R S
current		T [
)		[ \
;		\ ]
}

 	
} 
} ≤
bD:\Repo\Marsen\Marsen.NetCore.Dojo\src\Marsen.NetCore.Dojo\Kata_ReverseString\RecursionReversal.cs
	namespace 	
Marsen
 
. 
NetCore 
. 
Dojo 
. 
Tests #
.# $
Kata_ReverseString$ 6
{ 
public 

class 
RecursionReversal "
:# $
IStringReversal% 4
{ 
public 
string 
Do 
( 
string 
input  %
)% &
{ 	
if 
( 
string 
. 
IsNullOrEmpty $
($ %
input% *
)* +
||, .
input/ 4
.4 5
Length5 ;
==< >
$num? @
)@ A
{ 
return		 
input		 
;		 
}

 
var 
s1 
= 
input 
. 
	Substring $
($ %
$num% &
,& '
$num( )
)) *
;* +
var 
s2 
= 
input 
. 
	Substring $
($ %
$num% &
)& '
;' (
return 
Do 
( 
s2 
) 
+ 
s1 
; 
} 	
} 
} ∏
YD:\Repo\Marsen\Marsen.NetCore.Dojo\src\Marsen.NetCore.Dojo\Kata_ReverseString\Reversal.cs
	namespace 	
Marsen
 
. 
NetCore 
. 
Dojo 
. 
Tests #
.# $
Kata_ReverseString$ 6
{ 
public 

class 
Reversal 
: 
IStringReversal +
{ 
public 
string 
Do 
( 
string 
input  %
)% &
{ 	
return		 
input		 
is		 
null		  
?		! "
null		# '
:		( )
new		* -
string		. 4
(		4 5
input		5 :
.		: ;
Reverse		; B
(		B C
)		C D
.		D E
ToArray		E L
(		L M
)		M N
)		N O
;		O P
}

 	
} 
} ı'
xD:\Repo\Marsen\Marsen.NetCore.Dojo\src\Marsen.NetCore.Dojo\Refactoring_Improving_The_Design_of_Existing_Code\Customer.cs
	namespace 	
Marsen
 
. 
NetCore 
. 
Dojo 
. =
1Refactoring_Improving_The_Design_of_Existing_Code O
{ 
public		 

class		 
Customer		 
{

 
private 
readonly 
string 
_name  %
;% &
private 
readonly 
List 
< 
Rental $
>$ %
_rentals& .
=/ 0
new1 4
List5 9
<9 :
Rental: @
>@ A
(A B
)B C
;C D
public 
Customer 
( 
string 
name #
)# $
{ 	
_name 
= 
name 
; 
} 	
public 
void 
	AddRental 
( 
Rental $
arg% (
)( )
{ 	
_rentals 
. 
Add 
( 
arg 
) 
; 
} 	
public 
string 
GetName 
( 
) 
{ 	
return 
_name 
; 
} 	
public   
string   
	Statement   
(    
)    !
{!! 	
IEnumerator"" 
rentals"" 
=""  !
_rentals""" *
.""* +
GetEnumerator""+ 8
(""8 9
)""9 :
;"": ;
var## 
result## 
=## 
$"## 
Rental Record for ## -
{##- .
GetName##. 5
(##5 6
)##6 7
}##7 8
\n##8 :
"##: ;
;##; <
while$$ 
($$ 
rentals$$ 
.$$ 
MoveNext$$ #
($$# $
)$$$ %
)$$% &
{%% 
var&& 
each&& 
=&& 
(&& 
Rental&& "
)&&" #
rentals&&$ +
.&&+ ,
Current&&, 3
;&&3 4
result)) 
+=)) 
$")) 
\t)) 
{)) 
each)) #
.))# $
GetMovie))$ ,
()), -
)))- .
.)). /
GetTitle))/ 7
())7 8
)))8 9
}))9 :
\t)): <
{))< =
each))= A
.))A B
	GetCharge))B K
())K L
)))L M
}))M N
\n))N P
"))P Q
;))Q R
}** 
result-- 
+=-- 
$"-- 
Amount owed is -- '
{--' (
GetTotalAmount--( 6
(--6 7
)--7 8
}--8 9
\n--9 ;
"--; <
;--< =
result.. 
+=.. 
$".. 
You earned .. #
{..# $#
GetFrequentRenterPoints..$ ;
(..; <
)..< =
}..= >#
 frequent renter points..> U
"..U V
;..V W
return// 
result// 
;// 
}00 	
private22 
double22 
GetTotalAmount22 %
(22% &
)22& '
{33 	
double44 
result44 
=44 
$num44 
;44 
IEnumerator55 
rentals55 
=55  !
_rentals55" *
.55* +
GetEnumerator55+ 8
(558 9
)559 :
;55: ;
while66 
(66 
rentals66 
.66 
MoveNext66 #
(66# $
)66$ %
)66% &
{77 
var88 
each88 
=88 
(88 
Rental88 "
)88" #
rentals88$ +
.88+ ,
Current88, 3
;883 4
result99 
+=99 
each99 
.99 
	GetCharge99 (
(99( )
)99) *
;99* +
}:: 
return<< 
result<< 
;<< 
}== 	
private?? 
int?? #
GetFrequentRenterPoints?? +
(??+ ,
)??, -
{@@ 	
varAA 
resultAA 
=AA 
$numAA 
;AA 
IEnumeratorCC 
rentalsCC 
=CC  !
_rentalsCC" *
.CC* +
GetEnumeratorCC+ 8
(CC8 9
)CC9 :
;CC: ;
whileDD 
(DD 
rentalsDD 
.DD 
MoveNextDD #
(DD# $
)DD$ %
)DD% &
{EE 
varFF 
eachFF 
=FF 
(FF 
RentalFF "
)FF" #
rentalsFF$ +
.FF+ ,
CurrentFF, 3
;FF3 4
resultGG 
+=GG 
eachGG 
.GG #
GetFrequentRenterPointsGG 6
(GG6 7
)GG7 8
;GG8 9
}HH 
returnJJ 
resultJJ 
;JJ 
}KK 	
}LL 
}MM Ó
xD:\Repo\Marsen\Marsen.NetCore.Dojo\src\Marsen.NetCore.Dojo\Refactoring_Improving_The_Design_of_Existing_Code\MoveType.cs
	namespace 	
Marsen
 
. 
NetCore 
. 
Dojo 
. =
1Refactoring_Improving_The_Design_of_Existing_Code O
{ 
public 

enum 
MoveType 
{ 
Regular 
= 
$num 
, 

NewRelease 
= 
$num 
, 
Children		 
=		 
$num		 
}

 
} ô
uD:\Repo\Marsen\Marsen.NetCore.Dojo\src\Marsen.NetCore.Dojo\Refactoring_Improving_The_Design_of_Existing_Code\Movie.cs
	namespace 	
Marsen
 
. 
NetCore 
. 
Dojo 
. =
1Refactoring_Improving_The_Design_of_Existing_Code O
{ 
public 

class 
Movie 
{		 
private

 
readonly

 
string

 
_title

  &
;

& '
private 
Price 
_price 
; 
public 
Movie 
( 
string 
title !
,! "
MoveType# +
moveType, 4
)4 5
{ 	
_title 
= 
title 
; 
SetPriceCode 
( 
( 
MoveType "
)" #
moveType$ ,
), -
;- .
} 	
public 
void 
SetPriceCode  
(  !
MoveType! )
arg* -
)- .
{ 	
switch 
( 
arg 
) 
{ 
case 
MoveType 
. 
Regular %
:% &
_price 
= 
new  
RegularPrice! -
(- .
). /
;/ 0
break 
; 
case 
MoveType 
. 

NewRelease (
:( )
_price 
= 
new  
NewReleasePrice! 0
(0 1
)1 2
;2 3
break   
;   
case"" 
MoveType"" 
."" 
Children"" &
:""& '
_price## 
=## 
new##  
ChildrenPrice##! .
(##. /
)##/ 0
;##0 1
break$$ 
;$$ 
}%% 
}&& 	
public(( 
string(( 
GetTitle(( 
((( 
)((  
{)) 	
return** 
_title** 
;** 
}++ 	
public-- 
double-- 
	GetCharge-- 
(--  
int--  #

daysRented--$ .
)--. /
{.. 	
return// 
_price// 
.// 
	GetCharge// #
(//# $

daysRented//$ .
)//. /
;/// 0
}00 	
public22 
int22 #
GetFrequentRenterPoints22 *
(22* +
int22+ .

daysRented22/ 9
)229 :
{33 	
return44 
_price44 
.44 #
GetFrequentRenterPoints44 1
(441 2

daysRented442 <
)44< =
;44= >
}55 	
}66 
}77 ™	
àD:\Repo\Marsen\Marsen.NetCore.Dojo\src\Marsen.NetCore.Dojo\Refactoring_Improving_The_Design_of_Existing_Code\PriceState\ChildrenPrice.cs
	namespace 	
Marsen
 
. 
NetCore 
. 
Dojo 
. =
1Refactoring_Improving_The_Design_of_Existing_Code O
.O P

PriceStateP Z
{ 
public 

class 
ChildrenPrice 
:  
Price! &
{ 
public 
override 
double 
	GetCharge (
(( )
int) ,

daysRented- 7
)7 8
{ 	
double 
result 
= 
$num 
; 
result 
+= 
$num 
; 
if		 
(		 

daysRented		 
>		 
$num		 
)		 
result

 
+=

 
(

 

daysRented

 %
-

& '
$num

( )
)

) *
*

+ ,
$num

- 0
;

0 1
return 
result 
; 
} 	
} 
} á	
äD:\Repo\Marsen\Marsen.NetCore.Dojo\src\Marsen.NetCore.Dojo\Refactoring_Improving_The_Design_of_Existing_Code\PriceState\NewReleasePrice.cs
	namespace 	
Marsen
 
. 
NetCore 
. 
Dojo 
. =
1Refactoring_Improving_The_Design_of_Existing_Code O
.O P

PriceStateP Z
{ 
public 

class 
NewReleasePrice  
:! "
Price# (
{ 
public 
override 
double 
	GetCharge (
(( )
int) ,

daysRented- 7
)7 8
{ 	
return 

daysRented 
* 
$num  !
;! "
} 	
public

 
override

 
int

 #
GetFrequentRenterPoints

 3
(

3 4
int

4 7

daysRented

8 B
)

B C
{ 	
return 

daysRented 
> 
$num  !
?" #
$num$ %
:& '
$num( )
;) *
} 	
} 
} í
ÄD:\Repo\Marsen\Marsen.NetCore.Dojo\src\Marsen.NetCore.Dojo\Refactoring_Improving_The_Design_of_Existing_Code\PriceState\Price.cs
	namespace 	
Marsen
 
. 
NetCore 
. 
Dojo 
. =
1Refactoring_Improving_The_Design_of_Existing_Code O
.O P

PriceStateP Z
{ 
public 

abstract 
class 
Price 
{ 
public 
abstract 
double 
	GetCharge (
(( )
int) ,

daysRented- 7
)7 8
;8 9
public 
virtual 
int #
GetFrequentRenterPoints 2
(2 3
int3 6

daysRented7 A
)A B
{ 	
return		 
$num		 
;		 
}

 	
} 
} ®	
áD:\Repo\Marsen\Marsen.NetCore.Dojo\src\Marsen.NetCore.Dojo\Refactoring_Improving_The_Design_of_Existing_Code\PriceState\RegularPrice.cs
	namespace 	
Marsen
 
. 
NetCore 
. 
Dojo 
. =
1Refactoring_Improving_The_Design_of_Existing_Code O
.O P

PriceStateP Z
{ 
public 

class 
RegularPrice 
: 
Price  %
{ 
public 
override 
double 
	GetCharge (
(( )
int) ,

daysRented- 7
)7 8
{ 	
double 
result 
= 
$num 
; 
result 
+= 
$num 
; 
if		 
(		 

daysRented		 
>		 
$num		 
)		 
result 
+= 
( 

daysRented %
-& '
$num( )
)) *
*+ ,
$num- 0
;0 1
return 
result 
; 
} 	
} 
} ·
vD:\Repo\Marsen\Marsen.NetCore.Dojo\src\Marsen.NetCore.Dojo\Refactoring_Improving_The_Design_of_Existing_Code\Rental.cs
	namespace 	
Marsen
 
. 
NetCore 
. 
Dojo 
. =
1Refactoring_Improving_The_Design_of_Existing_Code O
{ 
public 

class 
Rental 
{ 
private		 
readonly		 
Movie		 
_movie		 %
;		% &
private

 
readonly

 
int

 
_daysRented

 (
;

( )
public 
Rental 
( 
Movie 
movie !
,! "
int# &

daysRented' 1
)1 2
{ 	
_movie 
= 
movie 
; 
_daysRented 
= 

daysRented $
;$ %
} 	
public 
int 
GetDaysRented  
(  !
)! "
{ 	
return 
_daysRented 
; 
} 	
public 
Movie 
GetMovie 
( 
) 
{ 	
return 
_movie 
; 
} 	
public 
double 
	GetCharge 
(  
)  !
{ 	
return 
GetMovie 
( 
) 
. 
	GetCharge '
(' (
GetDaysRented( 5
(5 6
)6 7
)7 8
;8 9
} 	
public!! 
int!! #
GetFrequentRenterPoints!! *
(!!* +
)!!+ ,
{"" 	
return$$ 
GetMovie$$ 
($$ 
)$$ 
.$$ #
GetFrequentRenterPoints$$ 5
($$5 6
GetDaysRented$$6 C
($$C D
)$$D E
)$$E F
;$$F G
}%% 	
}&& 
}'' 